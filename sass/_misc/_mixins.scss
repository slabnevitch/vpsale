@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src: url("../fonts/#{$file_name}.woff2") format("woff2"),
      url("../fonts/#{$file_name}.woff") format("woff");
    font-weight: #{$weight};
    font-style: #{$style};
  }
}

@mixin bz(){
	box-sizing: border-box;
}

@mixin dib ($valine: top){
	display: inline-block;
	vertical-align: $valine;
}

@mixin clearfix{
	&:before,
	&:after{
		content: '';
		display: table;
	}

	&:after{
		clear: both;
	}
}

@mixin but-null (){
	padding: 0;
	background-color: transparent;
	border: none;
	outline: none;
	font-family: inherit;

	@media (any-hover: hover) { //только для устройств с ховером
			cursor: pointer;
		}
}

@mixin dots-family{
	white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
@mixin dots-family-multi($lines){
	display: -webkit-box;
  -webkit-line-clamp: $lines;
  /* autoprefixer: off */
	-webkit-box-orient: vertical;
	/* autoprefixer: on */
  overflow: hidden;
  // text-overflow: ellipsis;
}
@mixin dots-family-null(){
	-webkit-line-clamp: none;
  -webkit-box-orient: inline-axis;
  overflow: visible;
  display: initial;
}
@mixin ol-custom{
	counter-reset: myCounter;
	margin: 0;
	padding: 0;
	li{
		position: relative;
		list-style-type: none;

		&:before{
			counter-increment: myCounter;
			content:counter(myCounter)'.';
		}
	}
}
// Use: @include flex-cols(40, 30, 4, ($lg: 3, $md: 2, $sm: 1), 'product-card', 1);
// $gap - расс-е. м/у колонками, $width - кол-во. колонок в ряду
@mixin flex-cols($gap, $rowgap, $width: 1, $points: ($lg: '',
$md: '',
$sm: '',
$xs: '',
$xss: '',
$xsss: '',
$min: '',
$mins: ''),
$columnClass: '', $wrap: 1) {
  display: flex;
  margin-left: math.div(-$gap,2) + px;
  margin-right: math.div(-$gap,2) + px;

  @if $wrap == 1{
	  flex-wrap: wrap;
  }
  
  @if $columnClass == ''{
  	._flex-col{
  		width: calc(100% / #{$width} - #{$gap + 'px'});
  		margin-left: math.div($gap,2) + px;
  		margin-right: math.div($gap,2) + px;

  		@if $rowgap != 0 {
  			&:not(:last-child){
  				margin-bottom: #{$rowgap + 'px'};
  			}
		  }
		
		@if $points{
	  		@each $point, $value in $points {
	  			@if $value != ''{
		  			// background-color: red;
		  			@media only screen and (max-width: #{$point}){
		  				width: calc(100% / #{$value} - #{$gap + 'px'});
		  			}

		  		}

		  	}

		}
	  }
	}@else {
		.#{$columnClass}{
			width:  calc(100% / #{$width} - #{$gap + 'px'});
			margin-left: math.div($gap,2) + px;
  		margin-right: math.div($gap,2) + px;

			@if $rowgap != 0 {
  			&:not(:last-child){
  				margin-bottom: #{$rowgap + 'px'};
  			}
		  }
			
			@if $points{
				@each $point, $value in $points {
					@if $value != ''{
		  			// background-color: red;
		  			@media only screen and (max-width: #{$point}){
		  				width: calc(100% / #{$value} - #{$gap + 'px'});
		  			}

		  		}

		  	}

		  }
		}
	}
}

//Use: @include flex-cols-gap(30, 15, 4, ($md: 3, $sm: 2, $xs: 1), 'column-class', 1);
@mixin flex-cols-gap($colgap, $rowgap: 0, $columns: 1, $points: ($lg: '',
$md: '',
$sm: '',
$xs: '',
$xss: '',
$xsss: '',
$min: '',
$mins: ''),
$columnClass: '', $wrap: 1) {
	$gap: rem($colgap);
	$gap-columns: calc(#{$columns} - 1);
	$gap-count: calc(#{$gap} / #{$columns} * #{$gap-columns});

  display: flex;
  column-gap: rem($colgap);
  
  @if $wrap == 1{
	  flex-wrap: wrap;
  }
  @if $rowgap != 0 {
  	row-gap: rem($rowgap);
  }
  
  @if $columnClass == ''{
  	._flex-col{
  		 flex-basis: calc(calc(100% / #{$columns}) - #{$gap-count});
		
		@if $points{
	  		@each $point, $value in $points {
	  			@if $value != ''{
		  			$gap-columns: calc(#{$value} - 1);
		  			$gap-count: calc(#{$gap} / #{$value} * #{$gap-columns});

		  			@media only screen and (max-width: #{$point}){
		  				 flex-basis: calc(calc(100% / #{$value}) - #{$gap-count});
		  			}

		  		}

		  	}

		}
	  }
	}@else {
		.#{$columnClass}{
			flex-basis: calc(calc(100% / #{$columns}) - #{$gap-count});
		
			@if $points{
		  		@each $point, $value in $points {
		  			@if $value != ''{
			  			$gap-columns: calc(#{$value} - 1);
			  			$gap-count: calc(#{$gap} / #{$value} * #{$gap-columns});

			  			@media only screen and (max-width: #{$point}){
			  				 flex-basis: calc(calc(100% / #{$value}) - #{$gap-count});
			  			}

			  		}

			  	}

			}
		}
	}
}

@mixin video(){
	position: relative;
	padding-bottom: 56.25%;
	height: 0;
	overflow: hidden;

	iframe,  object,  embed, video {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	}
}
@mixin menu-mob($media: $md, $burgerColor: #000, $burgerOpenColor: #000, $plateBgColor: #fff, $plateHeight: 80){//вызывается для для главного блока меню
	.menu-header__body{
		&:before{//верхняя плашка с заливкой (её может и не быть)
			content: '';
			height: #{$plateHeight + 'px'};
			width: 100%;
			position: fixed;
			right: -100%;
			top: 0;
			background-color: $plateBgColor;
			transition: right .4s ease;
			z-index: 2;

			.menu-opened & {
				right: 0;
			}
			@include min-screen($media){
				display: none;
			}
		}
		.menu-opened & {
			right: 0;
		}
		@media screen and (max-width: $media){
			position: fixed;
			top: 0;
			right: -100%;
			width: 100%;
			height: 100%;
			transition: all .4s ease;
			overflow-y: auto;
		}

	}
	.toggle-mnu{//задание цвета бургера, закрытого и открытого

	  span, span:after, span:before{
	    background-color: $burgerColor;

	    .menu-opened & {
	    	background-color: $burgerOpenColor;
	    }
	  }

		&.on span{
	    background-color: transparent;
	  } 

		@media screen and (max-width: $media){
			display: block;
		}
	}
}
@mixin pagination($width: 34, 
	$gap: 10, 
	$fontSize: 18, 
	$round: 50%, 
	$color: $text, 
	$bg: transparent, 
	$activeColor: #fff, 
	$activeBg: $accent,
	$arrowColor: $text){
	
	display: flex;
	align-items: center;
	column-gap: rem($gap);

	.pagination__arrow {
		@include but-null;
		color: $arrowColor;
		text-decoration: none;

		&[disabled]{
			color: rgba(#000, .12);
		}
	}

	// .pagination__arrow--prev {
	// 	transform: rotate(90deg);
	// }
	// .pagination__arrow--next {
	// 	transform: rotate(-90deg);
	// }

	.pagination__list {
		display: flex;
		align-items: center;
		column-gap: rem($gap);
	}

	.pagination__item{
		list-style-type: none;
	}

	.pagination__link {
		display: flex;
		align-items: center;
		justify-content: center;
		width: rem($width);
		height: rem($width);
		font-size:rem($fontSize);
		@if $round != false { 
			border-radius: $round;
	  }
		background-color: $bg;
		color: $color;
		
		&.active{
			color: $activeColor;
			background-color: $activeBg;
		}
	}
}
@mixin brs($radius: 5px){
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;

	-webkit-background-clip: padding-box;
	-moz-background-clip: padding-box;
	background-clip: padding-box;
} 

@mixin box-shadow($string...){
	-webkit-box-shadow: $string;
	-moz-box-shadow: $string;
	box-shadow: $string;
} 

@mixin transition($transitions...){
	-webkit-transition: $transition;
	-moz-transition: $transition;
	-ms-transition: $transition;
	-o-transition: $transition;
	transition: $transition;
} 

@mixin placecolor($color: #000000){
	&::-webkit-input-placeholder{
		color: $color;
		opacity: 1;
	}
	&::-moz-placeholder{
			color: $color;
			opacity: 1;
	}
	&:-moz-placeholder{
			color: $color;
			opacity: 1;
	}
	&:-ms-input-placeholder{
			color: $color;
			opacity: 1;
	}
} 

@mixin transform($transforms...){
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

@mixin absolute-center-old{
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	margin: auto;
	position: absolute;
}
@mixin absolute-center{
	display: block;
  max-width: 100%;
  max-height: 100%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%,-50%);
}

@mixin checkbox{
	position: absolute;
  box-sizing: border-box;
  width: 1px;
  height: 1px;
  display: block;
  left: 50%;
  top: 100%;
  margin: 0;
  padding: 0;
  opacity: 0;
}

@mixin vertical-grad($top, $bottom){
	background: $top; /* Old browsers */
    background: -moz-linear-gradient(top,  $top 0%, $bottom 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  $top 0%,$bottom 100%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top,  $top 0%,$bottom 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,  $top 0%,$bottom 100%); /* IE10+ */
    background: linear-gradient(to bottom,  $top 0%,$bottom 100%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000',GradientType=0 ); /* IE6-9 */
}

@mixin bb{
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

$rootFontSize: 16px;
@function rem($pixels, $context: $baseFontSize) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

    @return math.div($pixels, $context) * 1rem;
}

// Adaptive font-size
// $maxWidth: 1280; // ширина макета в граф. редакторе
@mixin adaptive-font($pcSize, $mobSize) {
 $addSize: $pcSize - $mobSize;
 $maxWidth: $maxWidth - 320;
 font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth}));
}
// end Adaptive font-size

@mixin adaptive-value($property, $pcSize, $mobSize, $type) { //$type = 1 -- 
 // $minScreenSize = $minScreenSize || 320px;
 $addSize: $pcSize - $mobSize;
 @if $type == 1{//использовать если ширина экрана меньше $maxWidthContainer
 		#{$property}: $pcSize + px;
 		@media (max-width: #{$maxWidthContainer + px}){
 			#{$property}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
 		}
 }@else if $type == 2{//использовать если ширина экрана больше $maxWidthContainer
 		#{$property}: $pcSize + px;
 		@media (min-width: #{$maxWidthContainer + px}){
			#{$property}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
 		}
 }@else{//на всей ширине экрана

 		#{$property}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer}));
 }
}

@mixin adaptive-value-rem($property, $pcSize, $mobSize, $maxWidth: $maxWidth, $minWidth: $minWidth, $type) { //$type = 1 -- 
 // $minScreenSize = $minScreenSize || 320px;
 // $addSize: $pcSize - $mobSize;
 
 	$slope: ($pcSize - $mobSize) / ($maxWidth - $minWidth);
	$yAxisIntersection: -$minWidth * $slope + $mobSize;
	$preferredValue: #{rem($yAxisIntersection)}" + " #{$slope * 100}vw;
	$propertyValue: #{"clamp(" rem($mobSize) "," $preferredValue "," rem($pcSize) ")"};
 
 @if $type == 1{//использовать если ширина экрана меньше $maxWidthContainer
 		#{$property}: rem($pcSize);
 		@media (max-width: em($maxWidthContainer)){
 			#{$property}: #{"clamp("rem($mobSize)","$preferredValue","rem($pcSize)")"};
 		}
 }@else if $type == 2{//использовать если ширина экрана больше $maxWidthContainer
 		#{$property}: rem($pcSize);
 		@media (min-width: em($maxWidthContainer)){
			#{$property}: $propertyValue;
 		}
 }@else{//на всей ширине экрана

 		#{$property}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer}));
 }
}

@mixin adaptive-padding($pcSize, $mobSize, $side) {
 $addSize: $pcSize - $mobSize;
 $maxWidth: $maxWidth - 320;
 padding-#{$side}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth}));
}
